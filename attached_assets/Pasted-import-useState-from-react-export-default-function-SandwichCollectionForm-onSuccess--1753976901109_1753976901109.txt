import { useState } from "react";

export default function SandwichCollectionForm({ onSuccess }) {
  const [date, setDate] = useState("2025-07-31");
  const [location, setLocation] = useState("");
  const [individualCount, setIndividualCount] = useState("");
  const [groups, setGroups] = useState([]);

  // Calculate total
  const calculateTotal = () => {
    const individual = parseInt(individualCount) || 0;
    const groupTotal = groups.reduce((sum, group) => sum + (parseInt(group.count) || 0), 0);
    return individual + groupTotal;
  };

  // Container styles
  const containerStyle = {
    maxWidth: '480px',
    margin: '0 auto',
    background: 'white',
    borderRadius: '12px',
    overflow: 'hidden',
    boxShadow: '0 4px 12px rgba(0, 0, 0, 0.08)'
  };

  // Compact header with total
  const headerStyle = {
    background: 'linear-gradient(135deg, #236383 0%, #007E8C 100%)',
    color: 'white',
    padding: '20px 24px',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center'
  };

  const headerLeftStyle = {
    flex: 1
  };

  const h1Style = {
    fontSize: '20px',
    fontWeight: '600',
    margin: 0,
    marginBottom: '2px'
  };

  const headerPStyle = {
    fontSize: '13px',
    fontWeight: '300',
    opacity: 0.9,
    margin: 0
  };

  const totalBadgeStyle = {
    background: 'rgba(255, 255, 255, 0.2)',
    borderRadius: '8px',
    padding: '8px 16px',
    textAlign: 'center',
    minWidth: '80px'
  };

  const totalLabelStyle = {
    fontSize: '11px',
    opacity: 0.8,
    marginBottom: '2px'
  };

  const totalNumberStyle = {
    fontSize: '24px',
    fontWeight: '700'
  };

  // Compact form container
  const formContainerStyle = {
    padding: '24px'
  };

  const formSectionStyle = {
    marginBottom: '20px'
  };

  const sectionTitleStyle = {
    fontSize: '13px',
    fontWeight: '600',
    color: '#236383',
    textTransform: 'uppercase',
    letterSpacing: '0.5px',
    marginBottom: '12px'
  };

  const formRowStyle = {
    display: 'grid',
    gridTemplateColumns: '1fr 1fr',
    gap: '12px'
  };

  const formGroupStyle = {
    display: 'flex',
    flexDirection: 'column',
    gap: '6px'
  };

  const labelStyle = {
    fontSize: '12px',
    fontWeight: '500',
    color: '#989393'
  };

  // Compact input styling
  const inputStyle = {
    height: '36px',
    padding: '0 12px',
    border: '1px solid #E9E6E6',
    borderRadius: '6px',
    fontSize: '14px',
    fontFamily: 'Roboto, sans-serif',
    transition: 'all 0.2s ease',
    background: 'white',
    color: '#646464'
  };

  const individualInputStyle = {
    ...inputStyle,
    width: '100px',
    fontWeight: '600',
    color: '#236383',
    fontSize: '18px',
    textAlign: 'center'
  };

  const selectStyle = {
    ...inputStyle,
    appearance: 'none',
    backgroundImage: `url("data:image/svg+xml,%3Csvg width='10' height='6' viewBox='0 0 10 6' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1 1L5 5L9 1' stroke='%23989393' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E")`,
    backgroundRepeat: 'no-repeat',
    backgroundPosition: 'right 12px center',
    paddingRight: '32px',
    cursor: 'pointer'
  };

  // Super compact groups section
  const groupsContainerStyle = {
    background: '#FAFAFA',
    borderRadius: '8px',
    padding: '16px',
    border: '1px solid #E9E6E6'
  };

  const groupsHeaderStyle = {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: '12px'
  };

  const groupItemStyle = {
    display: 'grid',
    gridTemplateColumns: '1fr 70px 32px',
    gap: '8px',
    marginBottom: '8px',
    alignItems: 'center'
  };

  const groupInputStyle = {
    ...inputStyle,
    height: '32px',
    padding: '0 10px',
    fontSize: '13px'
  };

  const removeBtnStyle = {
    width: '32px',
    height: '32px',
    background: '#FFE5E5',
    border: 'none',
    borderRadius: '6px',
    color: '#E74C3C',
    cursor: 'pointer',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: '18px',
    transition: 'all 0.2s ease'
  };

  const addGroupBtnStyle = {
    padding: '8px 12px',
    background: 'transparent',
    border: '1px dashed #236383',
    borderRadius: '6px',
    color: '#236383',
    fontSize: '12px',
    fontWeight: '500',
    cursor: 'pointer',
    transition: 'all 0.2s ease',
    fontFamily: 'Roboto, sans-serif'
  };

  // Compact submit section
  const submitSectionStyle = {
    padding: '20px 24px',
    borderTop: '1px solid #E9E6E6',
    display: 'flex',
    justifyContent: 'flex-end'
  };

  const submitBtnStyle = {
    background: '#FBAD3F',
    color: 'white',
    border: 'none',
    padding: '10px 24px',
    borderRadius: '6px',
    fontSize: '14px',
    fontWeight: '600',
    cursor: 'pointer',
    transition: 'all 0.2s ease',
    fontFamily: 'Roboto, sans-serif'
  };

  const helperTextStyle = {
    fontSize: '11px',
    color: '#989393',
    marginTop: '4px'
  };

  const emptyStateStyle = {
    fontSize: '12px',
    color: '#989393',
    textAlign: 'center',
    padding: '16px 0',
    fontStyle: 'italic'
  };

  // Event handlers
  const handleInputFocus = (e) => {
    e.currentTarget.style.outline = 'none';
    e.currentTarget.style.borderColor = '#236383';
  };

  const handleInputBlur = (e) => {
    e.currentTarget.style.borderColor = '#E9E6E6';
  };

  const addGroup = () => {
    setGroups([...groups, { id: Date.now().toString(), name: "", count: 0 }]);
  };

  const removeGroup = (id) => {
    setGroups(groups.filter((g) => g.id !== id));
  };

  const handleSubmit = () => {
    console.log({
      date,
      location,
      individualCount: parseInt(individualCount) || 0,
      groups: groups.filter(g => g.name && g.count > 0),
      total: calculateTotal()
    });
    
    if (onSuccess) {
      onSuccess();
    }
  };

  return (
    <div style={containerStyle}>
      {/* Compact Header with Total */}
      <div style={headerStyle}>
        <div style={headerLeftStyle}>
          <h1 style={h1Style}>Submit Collection</h1>
          <p style={headerPStyle}>Record today's sandwich distribution</p>
        </div>
        <div style={totalBadgeStyle}>
          <div style={totalLabelStyle}>Total</div>
          <div style={totalNumberStyle}>{calculateTotal()}</div>
        </div>
      </div>

      {/* Form */}
      <div style={formContainerStyle}>
        {/* Collection Details */}
        <div style={formSectionStyle}>
          <h3 style={sectionTitleStyle}>Collection Details</h3>
          <div style={formRowStyle}>
            <div style={formGroupStyle}>
              <label htmlFor="date" style={labelStyle}>Date</label>
              <input
                type="date"
                id="date"
                value={date}
                onChange={(e) => setDate(e.target.value)}
                style={inputStyle}
                onFocus={handleInputFocus}
                onBlur={handleInputBlur}
                required
              />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="location" style={labelStyle}>Location</label>
              <select
                id="location"
                value={location}
                onChange={(e) => setLocation(e.target.value)}
                style={selectStyle}
                onFocus={handleInputFocus}
                onBlur={handleInputBlur}
                required
              >
                <option value="">Select location</option>
                <option value="church">Church</option>
                <option value="school">School</option>
                <option value="community">Community Center</option>
                <option value="shelter">Shelter</option>
                <option value="other">Other</option>
              </select>
            </div>
          </div>
        </div>

        {/* Individual Sandwiches */}
        <div style={formSectionStyle}>
          <h3 style={sectionTitleStyle}>Individual Sandwiches</h3>
          <div>
            <input
              type="number"
              id="individual-count"
              min="0"
              placeholder="0"
              value={individualCount}
              onChange={(e) => setIndividualCount(e.target.value)}
              style={individualInputStyle}
              onFocus={handleInputFocus}
              onBlur={handleInputBlur}
            />
            <p style={helperTextStyle}>Count only individual sandwiches here</p>
          </div>
        </div>

        {/* Group Collections */}
        <div style={{ ...formSectionStyle, marginBottom: 0 }}>
          <div style={groupsHeaderStyle}>
            <h3 style={sectionTitleStyle}>Group Collections</h3>
            <button
              type="button"
              onClick={addGroup}
              style={addGroupBtnStyle}
              onMouseEnter={(e) => {
                e.currentTarget.style.borderColor = '#236383';
                e.currentTarget.style.background = 'rgba(35, 99, 131, 0.05)';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.borderColor = '#236383';
                e.currentTarget.style.background = 'transparent';
              }}
            >
              + Add Group
            </button>
          </div>
          
          <div style={groupsContainerStyle}>
            {groups.length === 0 ? (
              <p style={emptyStateStyle}>
                Click "Add Group" to record group collections
              </p>
            ) : (
              <div>
                {groups.map((group, i) => (
                  <div key={group.id} style={groupItemStyle}>
                    <input
                      type="text"
                      placeholder="Group name"
                      value={group.name}
                      onChange={(e) => {
                        const newGroups = [...groups];
                        newGroups[i].name = e.target.value;
                        setGroups(newGroups);
                      }}
                      style={groupInputStyle}
                      onFocus={handleInputFocus}
                      onBlur={handleInputBlur}
                    />
                    <input
                      type="number"
                      placeholder="0"
                      min="0"
                      value={group.count}
                      onChange={(e) => {
                        const newGroups = [...groups];
                        newGroups[i].count = parseInt(e.target.value) || 0;
                        setGroups(newGroups);
                      }}
                      style={{ ...groupInputStyle, textAlign: 'center', fontWeight: '600', color: '#236383' }}
                      onFocus={handleInputFocus}
                      onBlur={handleInputBlur}
                    />
                    <button
                      type="button"
                      onClick={() => removeGroup(group.id)}
                      style={removeBtnStyle}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.background = '#E74C3C';
                        e.currentTarget.style.color = 'white';
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.background = '#FFE5E5';
                        e.currentTarget.style.color = '#E74C3C';
                      }}
                    >
                      ×
                    </button>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Submit Button */}
      <div style={submitSectionStyle}>
        <button
          style={submitBtnStyle}
          onClick={handleSubmit}
          onMouseEnter={(e) => {
            e.currentTarget.style.background = '#F39C12';
            e.currentTarget.style.transform = 'translateY(-1px)';
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.background = '#FBAD3F';
            e.currentTarget.style.transform = 'translateY(0)';
          }}
        >
          Submit Collection
        </button>
      </div>
    </div>
  );
}